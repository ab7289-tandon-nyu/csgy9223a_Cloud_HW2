AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: CloudFormation stack for the Intelligent Photo Album

# Globals:
  # TODO

Parameters:
  OpenSearchUser:
    Type: String
  OpenSearchPassword:
    Type: String
    NoEcho: true


Resources:
  # S3 Bucket#############################################################################
  ImagesBucket:
    Type: 'AWS::S3::Bucket'        


  # Lambdas ################################################################################
  PhotoIndexLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Runtime: python3.9
      CodeUri: src/lambdas/PhotoIndexLambda/
      Handler: lambda_function.lambda_handler
      Description: A lambda function to index photos uploaded to our s3 bucket in OpenSearch
      MemorySize: 256
      Timeout: 120
      Role: !GetAtt TextRecognitionLambdaRole.Arn
      Events:
        S3Event:
          Type: S3
          Properties:
            Bucket: !Ref ImagesBucket
            Events: s3:ObjectCreated:Put
      Environment:
        Variables:
          OpenSearch_User: !Ref OpenSearchUser
          OpenSearch_Passwored: !Ref OpenSearchPassword

  PhotoSearchLambda:
    Type: "AWS::Serverless::Function"
    Properties:
      Runtime: python3.9
      CodeUri: src/lambdas/PhotoSearchLambda/
      Handler: lambda_function.lambda_handler
      Description: A lambda function to query lex and search for relevant photos in OpenSearch
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt LexLambdaRole.Arn
      Environment:
        Variables:
          OpenSearch_User: !Ref OpenSearchUser
          OpenSearch_Password: !Ref OpenSearchPassword
      # TODO add Events section for API Gateway



  # Roles ###################################################################################
  # Role for Lambda
  TextRecognitionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
              - Action:
                  - 's3:GetObject'
                Effect: Allow
                Resource: 'arn:aws:s3:::*'
              - Action:
                  - rekognition:detectLabels
                Effect: Allow
                Resource: "*"
            Version: '2012-10-17'
          PolicyName: TextRecognitionLambdaPolicy
      RoleName: TextRecognitionLambdaRole

  LexLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal: 
              Service:
                - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
        # access to run lex bot
        - "arn:aws:iam::aws:policy/AmazonLexRunBotsOnly"
        # access to create logs in CloudWatch
        - "arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy"
        # access to perform searches against OpenSearch
        - "arn:aws:iam::aws:policy/AmazonOpenSearchServiceReadOnlyAccess"

  # Runtime Role for Lex
  LexRuntimeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-07"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lexv2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonLexRunBotsOnly"



# PERMISSIONS ################################################################3333#######
  InvokeLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt PhotoIndexLambda.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt ImagesBucket.Arn


# OpenSearch Domain ###################################################################
  # OpenSearchServiceDomain:
  #   Type: AWS::OpenSearchService::Domain
  #   Properties:
  #     DomainName: "csgy-9223a-hw2-photos"
  #     EngineVersion: "OpenSearch_2.5"
  #     ClusterConfig:
  #       DedicatedMasterEnabled: False
  #       InstanceCount: 1
  #       InstanceType: "t3.small.search"
  #       ZoneAwarenessEnabled: false
  #       # ZoneAwarenessConfig:
  #       #   AvailabilityZoneCount: 1
  #     EBSOptions:
  #       EBSEnabled: true
  #       Iops: 0
  #       VolumeSize: 10
  #       VolumeType: "gp3"
  #     AccessPolicies:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             AWS: "*"
  #           Action: "es:*"
  #           Resource: "*"
  #     AdvancedSecurityOptions:
  #       Enabled: true
  #       InternalUserDatabaseEnabled: true
  #       MasterUserOptions:
  #         MasterUserName: !Ref OpenSearchUser
  #         MasterUserPassword: !Ref OpenSearchPassword
  #     DomainEndpointOptions:
  #       EnforceHTTPS: true
  #     EncryptionAtRestOptions:
  #       Enabled: true
  #     NodeToNodeEncryptionOptions:
  #       Enabled: true
      


# Outputs:
#   DomainEndpoint:
#     Value:
#       'Fn::GetAtt':
#         - OpenSearchServiceDomain
#         - DomainEndpoint