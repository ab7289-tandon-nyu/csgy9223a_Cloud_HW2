swagger: '2.0'
info:
  title: AI Photo Search
  description: 'AI Photo Search application, built during the Cloud and Big Data course at Columbia University.'
  version: 1.0.0
schemes:
  - https
basePath: /v1
produces:
  - application/json
paths:
  /search:
    get:
      summary: photo search method
      description: |
        This API takes in a search query as a query parameter and returns zero or more photos that match the search query.
      operationId: searchPhotos
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: the string to be searched
      produces:
        - application/json
      responses:
        '200':
          description: search results
          schema:
            $ref: '#/definitions/SearchResponse'
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      x-amazon-apigateway-integration:
        responses:
          default: 
            statusCode: "200"
          "BAD.*":
            statusCode: "400"
          "INT.*":
            statusCode: "500"
        credentials:
          Fn::Sub: '${ApiGatewayS3Role.Arn}'
        passthroughBehaviour: "when_no_match"
        httpMethod: POST
        type: AWS_PROXY
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PhotoSearchLambda.Arn}/invocations'
    options:
      summary: CORS Support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
      responses:
        '200':
          description: Default response from CORS method
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
  /upload:
    put:
      summary: photo upload method
      description: |
        This API takes in the multi-part body sent to it (ex. a photo) and uploads it to an S3 bucket.
      operationId: uploadPhoto
      consumes:
        - image/png
        - image/jpg
        - image/jpeg
      produces:
        - application/json
      parameters:
        - name: Content-Type
          in: header
          required: false
          type: string
        - name: item
          in: path
          required: true
          type: string
      responses:
        '200':
          description: S3 PUT operation response
          schema:
            type: object
        '403':
          description: Unauthorized
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      x-amazon-apigateway-integration:
        responses:
          default: 
            statusCode: "200"
          "BAD.*":
            statusCode: "400"
          "INT.*":
            statusCode: "500"
        credentials: 
          Fn::Sub: '${ApiGatewayS3Role.Arn}'
        requestParameters:
          integration.request.path.bucket: method.request.path.folder
          integration.request.header.Content-Type: method.request.header.Content-Type
        uri: 
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:s3:path/${ImagesBucket}/{item}'
        passthroughBehaviour: "when_no_match"
        httpMethod: PUT
        type: AWS
    options:
      summary: CORS Support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: |
                {}
      responses:
        '200':
          description: Default response from CORS method
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
definitions:
  SearchResponse:
    type: object
    properties:
      results:
        type: array
        items:
          $ref: '#/definitions/Photo'
  Photo:
    type: object
    properties:
      url:
        type: string
      labels:
        type: array
        items:
          type: string
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string